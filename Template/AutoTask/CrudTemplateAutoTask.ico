// Generated by Model Creator #Version#, #Date#
using System;
using System.Data;
using System.Collections.Generic;
using System.Text;

namespace ***NameSpace***
{
    public class AT***ClassName***
    {
        string className = "***ClassName***";
        bool isAutomaticKey = ***isAutomaticKey***;
        public Dictionary<string, Field> SelectFields = new Dictionary<string, Field>();
        public Dictionary<string, Field> UpdateFields = new Dictionary<string, Field>();
        public Dictionary<string, Field> WhereFields = new Dictionary<string, Field>();

        #region Structure Datatable
        
        public DataTable GetStructure()
        {
            DataTable dt = new DataTable();

            DataColumn[] keys = new DataColumn[1];
            DataColumn column;
            ***StructureField***
            
            return dt;
        }

        #endregion

        #region Field Custom
       
        private void AddSelect(object field)
        {
            AddSelect(field, string.Empty);
        }

        private void AddSelect(object field, string alias)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                SelectFields.Add(kvp.Key, kvp.Value);
            }
        }       

        private void AddUpdate(object field, object value)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                kvp.Value.Value = value;
                UpdateFields.Add(kvp.Key, kvp.Value);
            }
        }
      
        public void AddWhere(object field, object value)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                kvp.Value.Value = value;
                WhereFields.Add(kvp.Key, kvp.Value);
            }
        }
        
        public void AddWhere(object field, object value, LikeExtended likeEstended)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                kvp.Value.Value = value;
                kvp.Value.LikeExtended = likeEstended;
                WhereFields.Add(kvp.Key, kvp.Value);
            }
        }

        public void OpenBracket()
        {
            Field field = new Field();
            field.Name = "(";
            WhereFields.Add(WhereFields.Count.ToString(), field);
        }
        
        public void OpenBracket(OperatorType operatorType)
        {
            Field field = new Field();
            field.FilterType = operatorType;
            field.Name = "(";
            WhereFields.Add(WhereFields.Count.ToString(), field);
        }

        public void CloseBracket()
        {
            Field field = new Field();
            field.Name = ")";
            WhereFields.Add(WhereFields.Count.ToString(), field);
        }

        public void AddWhere(object field, object value, OperatorType operatorType)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                kvp.Value.FilterType = operatorType;
                kvp.Value.Value = value;
                WhereFields.Add(kvp.Key, kvp.Value);
            }
        }
        
        public void AddWhere(object field, object value, OperatorType operatorType, LikeExtended likeEstended)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                kvp.Value.FilterType = operatorType;
                kvp.Value.LikeExtended = likeEstended;
                kvp.Value.Value = value;
                WhereFields.Add(kvp.Key, kvp.Value);
            }
        }

        private void SetSelect(params object[] fields)
        {
            SelectFields = TrasformFields(fields);
        }

        private void SetUpdate(params object[] fields)
        {
            UpdateFields = TrasformFields(fields);
        }

        public void SetWhere(params object[] fields)
        {
            WhereFields = TrasformFields(fields);
        }

        private void ClearSelect()
        {
            SelectFields = new Dictionary<string, Field>();
        }

        private void ClearUpdate()
        {
            UpdateFields = new Dictionary<string, Field>();
        }

        public void ClearWhere()
        {
            WhereFields = new Dictionary<string, Field>();
        }

        private Dictionary<string, Field> TrasformFields (params object[] fields)
        {
            Dictionary<string, Field> fieldsCollection = new Dictionary<string, Field>();

            #region Fields 

            Field field = new Field();
            for (int i = 0; i < fields.Length; i++)
            {                        
                if ((fields[i] is Enum) || (fields[i] is String))
                {
                    switch(fields[i].ToString()) {                    
***SWITCHCUSTOMFIELDS*** 
                    }
                }
            }

            return fieldsCollection;

            #endregion        
        }

        public enum F
        {
***FIELDENUM***
        }

        #endregion

        #region Relationship-Index
                
***DeclareRelationship***
***DeclareIndex***

        #endregion

        #region Field

***PrivateField***
***PublicField***
        #endregion

        #region Crud            
              
        #endregion

        
        public virtual string GetQueryXML()
        {
            string query = @"<queryxml>
            <entity>***ClassName***</entity>
            <query>
               {0}
            </query>
            </queryxml>";

            int openBracket = 0;
            int closeBracket = 0;

            StringBuilder sb = new StringBuilder();
            foreach (KeyValuePair<string, Field> field in WhereFields)
            {
                if ((field.Value.Name.Equals("(")) || (field.Value.Name.Equals(")")))
                {
                    if (field.Value.Name.Equals("("))
                    {
                        openBracket++;

                        string type = string.Empty;
                        switch (field.Value.FilterType)
                        {
                            case OperatorType.AND: type = "<condition>"; break;
                            case OperatorType.OR: type = "<condition operator=\"OR\">"; break;
                        }

                        bool isFirst = false;
                        if ((openBracket == 1) && (closeBracket == 0))
                            isFirst = true;

                        if (!isFirst)
                            sb.Append(type);
                    }

                    if (field.Value.Name.Equals(")"))
                    {
                        closeBracket++;
                        sb.Append("</condition>");
                    }
                }
                else
                {
                    string operatorType = string.Format("op=\"{0}\"", field.Value.LikeExtended.ToString().ToLower());
                    sb.Append(string.Format("{0}<field>{1}<expression {2}>{3}</expression></field>", string.Empty, field.Key, operatorType, field.Value.Value.ToString()));
                }
            }

            string returnValue = string.Format(query, sb.ToString());

            SelectFields.Clear();
            WhereFields.Clear();

            return returnValue;
        }
                                 
        public class SuperClass
        {

***SuperClass***

        }

        #region Staticfields
        
        public class Fields
        {

***PublicField***

        }
        
        #endregion
    }        
}