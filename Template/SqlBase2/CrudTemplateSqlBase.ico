// Generated by Model Creator #Version#, #Date#
using System;
using System.Data;
using Gupta.SQLBase.Data;
using System.Collections.Generic;

namespace ***NameSpace***
{
    public class ***ClassName***_Base : DbShared, I***ClassName***
    {
        string ownner = "#Owner#";
        string className = "***ClassName***";
        public string ConnectionString = string.Empty;      
        SQLBaseTransaction transaction;
        string[] columnBool = new string[] { ***FieldBoolean*** };
        bool isAutomaticKey = ***isAutomaticKey***;
        public Dictionary<string, Field> SelectFields = new Dictionary<string, Field>();
        public Dictionary<string, Field> UpdateFields = new Dictionary<string, Field>();
        public Dictionary<string, Field> WhereFields = new Dictionary<string, Field>();

        #region Structure Datatable
        
        public DataTable GetStructure()
        {
            DataTable dt = new DataTable();

            DataColumn[] keys = new DataColumn[1];
            DataColumn column;
            ***StructureField***
            
            return dt;
        }

        #endregion

        #region Field Custom
       
        public void AddSelect(object field)
        {
            AddSelect(field, string.Empty);
        }

        public void AddSelect(object field, string alias)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                SelectFields.Add(kvp.Key, kvp.Value);
            }
        }       

        public void AddUpdate(object field, object value)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                kvp.Value.Value = value;
                UpdateFields.Add(kvp.Key, kvp.Value);
            }
        }
      
        public void AddWhere(object field, object value)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                kvp.Value.Value = value;
                WhereFields.Add(kvp.Key, kvp.Value);
            }
        }

        public void OpenBracket()
        {
            Field field = new Field();
            field.Name = "(";
            WhereFields.Add(WhereFields.Count.ToString(), field);
        }

        public void CloseBracket()
        {
            Field field = new Field();
            field.Name = ")";
            WhereFields.Add(WhereFields.Count.ToString(), field);
        }

        public void AddWhere(object field, object value, OperatorType operatorType)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                kvp.Value.FilterType = operatorType;
                kvp.Value.Value = value;
                WhereFields.Add(kvp.Key, kvp.Value);
            }
        }

        public void SetSelect(params object[] fields)
        {
            SelectFields = TrasformFields(fields);
        }

        public void SetUpdate(params object[] fields)
        {
            UpdateFields = TrasformFields(fields);
        }

        public void SetWhere(params object[] fields)
        {
            WhereFields = TrasformFields(fields);
        }

        public void ClearSelect()
        {
            SelectFields = new Dictionary<string, Field>();
        }

        public void ClearUpdate()
        {
            UpdateFields = new Dictionary<string, Field>();
        }

        public void ClearWhere()
        {
            WhereFields = new Dictionary<string, Field>();
        }

        private Dictionary<string, Field> TrasformFields (params object[] fields)
        {
            Dictionary<string, Field> fieldsCollection = new Dictionary<string, Field>();

            #region Fields 

            Field field = new Field();
            for (int i = 0; i < fields.Length; i++)
            {                        
                if ((fields[i] is Enum) || (fields[i] is String))
                {
                    switch(fields[i].ToString()) {                    
***SWITCHCUSTOMFIELDS*** 
                    }
                }
            }

            return fieldsCollection;

            #endregion        
        }

        public enum F
        {
***FIELDENUM***
        }

        #endregion

        #region Relationship-Index
                
***DeclareRelationship***
***DeclareIndex***

        #endregion

        #region Field

***PrivateField***
***PublicField***
        #endregion

        #region Crud

        public virtual void ***Insert***()
        {           
            InsertPrivate();            
        }
        
        private void InsertPrivate()
        {           
            string query = "***InsertSql***";
            SQLBaseParameter[] parameters = GetParameter(EventContext.Insert);
            

            if (transaction == null)
                SqlHelperGupta.ExecuteNonQuery(ConnectionString, CommandType.Text, query, parameters);
            else SqlHelperGupta.ExecuteNonQueryTransaction(transaction, CommandType.Text, query, parameters);            
        }

        public void Clone()
        {           
            string query = "***InsertSql***";      
            SQLBaseParameter[] parameters = GetParameter(EventContext.Clone);
            
            if (transaction == null)
                SqlHelperGupta.ExecuteNonQuery(ConnectionString, CommandType.Text, query, parameters);
            else SqlHelperGupta.ExecuteNonQueryTransaction(transaction, CommandType.Text, query, parameters);
        }
       
        public virtual int ***Update***()
        {    
            string query = "#UpdateSql#";
            SQLBaseParameter[] parameters = GetParameter(EventContext.Update);
            
            if (transaction == null)                                     
                return SqlHelperGupta.ExecuteNonQuery(ConnectionString, CommandType.Text, query, parameters);  
            else return SqlHelperGupta.ExecuteNonQueryTransaction(transaction, CommandType.Text, query, parameters);
        }

        public virtual int UpdateDynamic()
        {
            string query = SqlUtility.BuildUpdate(string.Concat(ownner, ".", className), UpdateFields, WhereFields);

            try
            {
                if (transaction == null)
                    return SqlHelperGupta.ExecuteNonQuery(ConnectionString, CommandType.Text, query);
                else return SqlHelperGupta.ExecuteNonQueryTransaction(transaction, CommandType.Text, query);                                                         
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                UpdateFields.Clear();
                WhereFields.Clear();
            }
        }
                
        public virtual int ***Delete***()
        {  
            string query = "#DeleteSql#";       
            SQLBaseParameter[] parameters = GetParameter(EventContext.Delete);
                                                    
            if (transaction == null)
                return SqlHelperGupta.ExecuteNonQuery(ConnectionString, CommandType.Text,query, parameters);
            else return SqlHelperGupta.ExecuteNonQueryTransaction(transaction, CommandType.Text, query, parameters);
        }

        public virtual void ***Delete***(***DeclarationParameterKeys***)
        {
            string query = "#DeleteSql#";
            ***ClassName*** item = new ***ClassName***();            

            #region Parameters
            
			***ParameterKeys***

            SQLBaseParameter[] parameters = new SQLBaseParameter[] { ***ListParameterKeys*** };
            #endregion
                                            
            if (transaction == null)
                SqlHelperGupta.ExecuteNonQuery(ConnectionString, CommandType.Text,query, parameters);
            else SqlHelperGupta.ExecuteNonQueryTransaction(transaction, CommandType.Text, query, parameters);
        }

        public virtual int DeleteDynamic()
        {
            string query = SqlUtility.BuildDelete(string.Concat(ownner, ".", className), WhereFields);

            try
            {
                if (transaction == null)
                    return SqlHelperGupta.ExecuteNonQuery(ConnectionString, CommandType.Text, query);
                else return SqlHelperGupta.ExecuteNonQueryTransaction(transaction, CommandType.Text, query);                                                                         
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                WhereFields.Clear();
            }
        }

        #endregion

        #region CollectionBase

        public virtual DataTable ***GetCollection***()
        {                        
            string query = "#GetCollectionSql#";          
            return TrasformDataTable(SqlHelperGupta.ExecuteDataTable(ConnectionString, CommandType.Text, query));
        }     

        public virtual DataTable GetCollectionDynamic()
        {
            string query = SqlUtility.BuildSelect(string.Concat(ownner, ".", className), SelectFields, WhereFields);

            return SqlHelperGupta.ExecuteDataTable(ConnectionString, CommandType.Text, query);

            SelectFields.Clear();
            WhereFields.Clear();
        }   

        public virtual ***ClassName*** GetByCode(***DeclarationParameterKeys***)
        {
            string query = "#GetByCodeSql#";
            ***ClassName*** item = new ***ClassName***();            

            #region Parameters
            
			***ParameterKeys***

            SQLBaseParameter[] parameters = new SQLBaseParameter[] { ***ListParameterKeys*** };
            #endregion
            
            DataTable dt = SqlHelperGupta.ExecuteDataTable(ConnectionString, CommandType.Text, query, parameters);
            try
            {
                if (dt.Rows.Count > 0)
                {
                    item = MappingDataTable(dt.Rows[0]);
                }
            }
            catch (Exception ex) { throw new Exception(ex.Message); }
            return item;
        }
***CheckExist***

        #endregion

        #region Functionality

        public virtual bool ***IsUnknown***
        {
            get 
            {                
                if (***IsUnknownCondtition***) return true;
                else return false;
            }
        }

        public virtual void Retry(string fieldName)
        {
            object oldId = SqlHelperGupta.ExecuteScalar(ConnectionString, CommandType.Text, string.Format("SELECT MAX({0}) FROM FIP_DBS.{1}", fieldName, className));
            if (oldId == null)
                oldId = 0;

            ***KetType*** newId = ***KetType***.Parse(oldId.ToString());            
            object oldRowId = SqlHelperGupta.ExecuteScalar(ConnectionString, CommandType.Text, string.Format("SELECT N_UPD_VER FROM SP_T_SYSTABLES WHERE C_NAME = '{0}'", className));
            int newRowId = int.Parse(oldRowId.ToString());
            newRowId++;
            SqlHelperGupta.ExecuteNonQuery(ConnectionString, CommandType.Text, string.Format("UPDATE SP_T_SYSTABLES SET N_LAST_ROWID = {0},N_UPD_VER = {2} WHERE C_NAME = '{1}'", newId.ToString(), className, newRowId.ToString()));
        }

        public virtual int GetLastUpdVer()
        {
            string query = "#GetByCodeSqlUpdVer#";
            ***ClassName*** item = new ***ClassName***();            

            #region Parameters
            
			***ParameterKeys***

            SQLBaseParameter[] parameters = new SQLBaseParameter[] { ***ListParameterKeys*** };
            #endregion

            int newId = 1;            
            object id = SqlHelperGupta.ExecuteScalar(ConnectionString, CommandType.Text, query, parameters);
            if (id != null)
            {
                newId = int.Parse(id.ToString());
                newId++;                
            }
            
            return newId;
        }

        public DataTable TrasformDataTable(DataTable dt)
        {
            int i = 0;
            foreach (string columnName in columnBool)
            {
                string columnNameOld = string.Concat(columnName, "_OLD");
                dt.Columns[columnName].Caption = columnNameOld;
                dt.Columns[columnName].ColumnName = columnNameOld;
                
                DataColumn column;
                column = new DataColumn();
                column.DataType = System.Type.GetType("System.Boolean");
                column.ColumnName = columnName;
                dt.Columns.Add(column);
                i++;
            }

            if (i > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    foreach (string columnName in columnBool)
                    {                        
                         if (dr[string.Concat(columnName, "_OLD")].ToString().Equals("1"))
                            dr[columnName] = true;
                        else dr[columnName] = false;
                    }
                }
            }

            return dt; 
        }

        public virtual void SetConnectionString(string connectionString)
        {
            if (!connectionString.Equals(string.Empty))
                ConnectionString = connectionString;           
        }

        public void SetTransaction(SQLBaseTransaction transactionBase)
        {
            transaction = transactionBase;
            SetConnectionString(transaction.Connection.ConnectionString);
        }

        #endregion
    
        public ***ClassName*** Mapping(SQLBaseDataReader dataReader)
        {
            ***ClassName*** item = new ***ClassName***();

***MappingDataReader***           
            return item;
        }

        public ***ClassName*** MappingDataTable(DataRow dataReader)
        {
            ***ClassName*** item = new ***ClassName***();

***MappingDataTable***           
            return item;
        }

        private SQLBaseParameter[] GetParameter(EventContext operation)
        {
            SQLBaseParameter[] parameters = new SQLBaseParameter[20];

            #region Parameter
***Parameters***
            
            #endregion

            switch (operation)
            {
                case EventContext.Insert:
                    parameters = new SQLBaseParameter[] 
                                                        {
                                                            ***ParametersListInsert***
                                                        };                                                    
                    break;
                case EventContext.Update:
                    parameters = new SQLBaseParameter[] { ***ParametersListUpdate*** };                                                   
                    break;
                case EventContext.Delete:
                    parameters = new SQLBaseParameter[] { ***ParametersListDelete*** };
                    break;
                case EventContext.Clone:
                    parameters = new SQLBaseParameter[] { ***ParametersListClone*** };
                    break;
            }

            return parameters;
        }     

        public bool IsTransaction
        {
            get
            {
                if (transaction != null) return true;
                else return false;
            }
        }

        public SQLBaseTransaction GetTransaction
        {
            get
            {
                if (transaction != null) return transaction;
                else return null;
            }
        }

        public class SuperClass
        {

***SuperClass***

        }

        #region Staticfields
        
        public class Fields
        {

***PublicField***

        }
        
        #endregion
    }

        
}