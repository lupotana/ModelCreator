// Generated by Model Creator #Version#, #Date#
using System;
using System.Data;
using Tecnoema.Develop.UtilityLayer;
using develop.spFwk6.errors;
using develop.spFwk6.dbLib;
using System.Collections.Generic;
using Devart.Data.PostgreSql;

namespace ***NameSpace***
{
    public class ***ClassName***_Base : I***ClassName***
    {
        string ownner = "#Owner#";
        string className = "***ClassName***";
        public string ConnectionString = string.Empty;      
        PgSqlTransaction transaction;
        string[] columnBool = new string[] { ***FieldBoolean*** };
        bool isAutomaticKey = ***isAutomaticKey***;
        public Dictionary<string, Field> SelectFields = new Dictionary<string, Field>();
        public Dictionary<string, Field> UpdateFields = new Dictionary<string, Field>();
        public Dictionary<string, Field> WhereFields = new Dictionary<string, Field>();

        #region Structure Datatable
        
        public DataTable GetStructure()
        {
            DataTable dt = new DataTable();

            DataColumn[] keys = new DataColumn[1];
            DataColumn column;
            ***StructureField***
            
            return dt;
        }

        #endregion

        #region Field Custom
       
        public void AddSelect(object field)
        {
            AddSelect(field, string.Empty);
        }

        public void AddSelect(object field, string alias)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                SelectFields.Add(kvp.Key, kvp.Value);
            }
        }       

        public void AddUpdate(object field, object value)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                kvp.Value.Value = value;
                UpdateFields.Add(kvp.Key, kvp.Value);
            }
        }
      
        public void AddWhere(object field, object value)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                kvp.Value.Value = value;
                WhereFields.Add(kvp.Key, kvp.Value);
            }
        }

        public void OpenBracket()
        {
            Field field = new Field();
            field.Name = "(";
            WhereFields.Add(WhereFields.Count.ToString(), field);
        }

        public void CloseBracket()
        {
            Field field = new Field();
            field.Name = ")";
            WhereFields.Add(WhereFields.Count.ToString(), field);
        }

        public void AddWhere(object field, object value, OperatorType operatorType)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                kvp.Value.FilterType = operatorType;
                kvp.Value.Value = value;
                WhereFields.Add(kvp.Key, kvp.Value);
            }
        }

        public void SetSelect(params object[] fields)
        {
            SelectFields = TrasformFields(fields);
        }

        public void SetUpdate(params object[] fields)
        {
            UpdateFields = TrasformFields(fields);
        }

        public void SetWhere(params object[] fields)
        {
            WhereFields = TrasformFields(fields);
        }

        public void ClearSelect()
        {
            SelectFields = new Dictionary<string, Field>();
        }

        public void ClearUpdate()
        {
            UpdateFields = new Dictionary<string, Field>();
        }

        public void ClearWhere()
        {
            WhereFields = new Dictionary<string, Field>();
        }

        private Dictionary<string, Field> TrasformFields (params object[] fields)
        {
            Dictionary<string, Field> fieldsCollection = new Dictionary<string, Field>();

            #region Fields 

            Field field = new Field();
            for (int i = 0; i < fields.Length; i++)
            {                        
                if ((fields[i] is Enum) || (fields[i] is String))
                {
                    switch(fields[i].ToString()) {                    
***SWITCHCUSTOMFIELDS*** 
                    }
                }
            }

            return fieldsCollection;

            #endregion        
        }

        public enum F
        {
***FIELDENUM***
        }

        #endregion

        #region Relationship-Index
                
***DeclareRelationship***
***DeclareIndex***

        #endregion

        #region Field

***PrivateField***
***PublicField***
        #endregion

        #region Crud

        public virtual ***TypeKey*** InsertKey()
        {           
             return InsertPrivate();                      
        }

        public virtual void ***Insert***()
        {           
            InsertPrivate();            
        }
        
        private ***TypeKey*** InsertPrivate()
        {           
            string query = "***InsertSql***";
            PgSqlParameter[] parameters = GetParameter(EventContext.Insert);
            try
            {
                if (transaction == null)
                    SqlHelperPostGres.ExecuteNonQuery(ConnectionString, CommandType.Text, query, parameters);
                //else SqlHelperPostGres.ExecuteNonQueryTransaction(transaction, CommandType.Text, query, parameters);   
    
                if (***IsSingleKey***)
                {
                    foreach (PgSqlParameter parameter in parameters)
                    {
                        if (parameter.ParameterName.Equals("***TableKey***"))
                        {
                            ***TableKey*** = ***TableKeyType***(parameter.Value.ToString());
                            break;
                        }
                    }
                }             
            }
            catch (Exception ex)
            {        
            if (transaction != null)
                    transaction.Rollback();   
            }   
            if (***IsSingleKey***)
                return ***TypeKey***.Parse(***TableKey***.ToString());
            else return ***TypeKey***.Parse("0");
        }

        public void Clone()
        {           
            string query = "***InsertSql***";      
            PgSqlParameter[] parameters = GetParameter(EventContext.Clone);
            try
            {
                if (transaction == null)
                    SqlHelperPostGres.ExecuteNonQuery(ConnectionString, CommandType.Text, query, parameters);
                //else SqlHelperPostGres.ExecuteNonQueryTransaction(transaction, CommandType.Text, query, parameters);                           
            }
            catch (Exception ex)
            {             
                  if (transaction != null)
                    transaction.Rollback();   
            }              
        }
       
        public virtual int ***Update***()
        {    
            string query = "#UpdateSql#";
            PgSqlParameter[] parameters = GetParameter(EventContext.Update);
            try
            {   
                if (transaction == null)                                     
                    return SqlHelperPostGres.ExecuteNonQuery(ConnectionString, CommandType.Text, query, parameters);  
                //else return SqlHelperPostGres.ExecuteNonQueryTransaction(transaction, CommandType.Text, query, parameters);                                         
            }
            catch (Exception ex)
            {
                if (transaction != null)
                    transaction.Rollback();
            }
            return 0;
        }

        public virtual int UpdateDynamic()
        {
            string query = SqlUtility.BuildUpdate(string.Concat(ownner, ".", className), UpdateFields, WhereFields);

            try
            {
                if (transaction == null)
                    return SqlHelperPostGres.ExecuteNonQuery(ConnectionString, CommandType.Text, query);
                //else return SqlHelperPostGres.ExecuteNonQueryTransaction(transaction, CommandType.Text, query);                                                         
            }
            catch (Exception ex)
            {
               if (transaction != null)
                    transaction.Rollback();
            }
            finally
            {
                UpdateFields.Clear();
                WhereFields.Clear();
            }
            return 0;
        }
                
        public virtual int ***Delete***()
        {  
            string query = "#DeleteSql#";       
            PgSqlParameter[] parameters = GetParameter(EventContext.Delete);
            try
            {                                           
                if (transaction == null)
                    return SqlHelperPostGres.ExecuteNonQuery(ConnectionString, CommandType.Text,query, parameters);
                //else return SqlHelperPostGres.ExecuteNonQueryTransaction(transaction, CommandType.Text, query, parameters);
            }
            catch (Exception ex)
            {                
                if (transaction != null)
                    transaction.Rollback();
                    
            }
            return 0;
        }

        public virtual void ***Delete***(***DeclarationParameterKeys***)
        {
            string query = "#DeleteSql#";
            ***ClassName*** item = new ***ClassName***();            

            #region Parameters
            
			***ParameterKeys***

            PgSqlParameter[] parameters = new PgSqlParameter[] { ***ListParameterKeys*** };
            #endregion
            
            try
            {                                           
                if (transaction == null)
                    SqlHelperPostGres.ExecuteNonQuery(ConnectionString, CommandType.Text,query, parameters);
                //else SqlHelperPostGres.ExecuteNonQueryTransaction(transaction, CommandType.Text, query, parameters);
            }
            catch (Exception ex)
            {                
                if (transaction != null)
                    transaction.Rollback();
                       
            }
        }

        public virtual int DeleteDynamic()
        {
            string query = SqlUtility.BuildDelete(string.Concat(ownner, ".", className), WhereFields);

            try
            {
                if (transaction == null)
                    return SqlHelperPostGres.ExecuteNonQuery(ConnectionString, CommandType.Text, query);
                //else return SqlHelperPostGres.ExecuteNonQueryTransaction(transaction, CommandType.Text, query);                                                                         
            }
            catch (Exception ex)
            {
                if (transaction != null)
                    transaction.Rollback();               
            }
            finally
            {
                WhereFields.Clear();
            }
            return 0;
        }

        #endregion

        #region CollectionBase

        public virtual DataTable ***GetCollection***()
        {                        
            string query = "#GetCollectionSql#";          
            return TrasformDataTable(SqlHelperPostGres.ExecuteDataTable(ConnectionString, CommandType.Text, query));
        }     

        public virtual DataTable GetCollectionDynamic()
        {
            string query = SqlUtility.BuildSelect(string.Concat(ownner, ".", className), SelectFields, WhereFields);

            return SqlHelperPostGres.ExecuteDataTable(ConnectionString, CommandType.Text, query);

            SelectFields.Clear();
            WhereFields.Clear();
        }   

        public virtual ***ClassName*** GetByCode(***DeclarationParameterKeys***)
        {
            string query = "#GetByCodeSql#";
            ***ClassName*** item = new ***ClassName***();            

            #region Parameters
            
			***ParameterKeysCode***

            PgSqlParameter[] parameters = new PgSqlParameter[] { ***ListParameterKeys*** };
            #endregion
            
            DataTable dt = SqlHelperPostGres.ExecuteDataTable(ConnectionString, CommandType.Text, query, parameters);
            try
            {
                if (dt.Rows.Count > 0)
                {
                    item = MappingDataTable(dt.Rows[0]);
                }
            }
            catch (Exception ex) { throw new Exception(ex.Message); }
            return item;
        }
***CheckExist***

        #endregion

        #region Functionality

        public virtual bool ***IsUnknown***
        {
            get 
            {                
                if (***IsUnknownCondtition***) return true;
                else return false;
            }
        }

        public virtual ***KetType*** GetLastId(string fieldName)
        {
            ***KetType*** newId = 1;
            object oldId = SqlHelperPostGres.ExecuteScalar(ConnectionString, CommandType.Text, string.Format("SELECT N_LAST_ROWID FROM SP_T_SYSTABLES WHERE C_NAME = '{0}'", className));
            if (oldId == null)
            {
                oldId = SqlHelperPostGres.ExecuteScalar(ConnectionString, CommandType.Text, string.Format("SELECT MAX({0}) FROM FIP_DBS.{1}", fieldName, className));
                if (oldId == null)
                    oldId = 0;

                if (oldId == DBNull.Value)
                    oldId = 0;

                newId = ***KetType***.Parse(oldId.ToString());
                newId++;
                SqlHelperPostGres.ExecuteNonQuery(ConnectionString, CommandType.Text, string.Format("INSERT INTO SP_T_SYSTABLES (C_NAME,N_LAST_ROWID,N_UPD_VER) VALUES ('{0}',{1},1)", className, oldId.ToString()));
            }
            else
            {
                newId = ***KetType***.Parse(oldId.ToString());
                newId++;
            }            
            object oldRowId = SqlHelperPostGres.ExecuteScalar(ConnectionString, CommandType.Text, string.Format("SELECT N_UPD_VER FROM SP_T_SYSTABLES WHERE C_NAME = '{0}'", className));
            int newRowId = int.Parse(oldRowId.ToString());
            newRowId++;
            SqlHelperPostGres.ExecuteNonQuery(ConnectionString, CommandType.Text, string.Format("UPDATE SP_T_SYSTABLES SET N_LAST_ROWID = {0},N_UPD_VER = {2} WHERE C_NAME = '{1}'", newId.ToString(), className,newRowId.ToString()));
            return newId;
        }

        public virtual void Retry(string fieldName)
        {
            object oldId = SqlHelperPostGres.ExecuteScalar(ConnectionString, CommandType.Text, string.Format("SELECT MAX({0}) FROM FIP_DBS.{1}", fieldName, className));
            if (oldId == null)
                oldId = 0;

            ***KetType*** newId = ***KetType***.Parse(oldId.ToString());            
            object oldRowId = SqlHelperPostGres.ExecuteScalar(ConnectionString, CommandType.Text, string.Format("SELECT N_UPD_VER FROM SP_T_SYSTABLES WHERE C_NAME = '{0}'", className));
            int newRowId = int.Parse(oldRowId.ToString());
            newRowId++;
            SqlHelperPostGres.ExecuteNonQuery(ConnectionString, CommandType.Text, string.Format("UPDATE SP_T_SYSTABLES SET N_LAST_ROWID = {0},N_UPD_VER = {2} WHERE C_NAME = '{1}'", newId.ToString(), className, newRowId.ToString()));
        }

        public virtual int GetLastUpdVer()
        {
            string query = "#GetByCodeSqlUpdVer#";
            ***ClassName*** item = new ***ClassName***();            

            #region Parameters
            
			***ParameterKeys***

            PgSqlParameter[] parameters = new PgSqlParameter[] { ***ListParameterKeys*** };
            #endregion

            int newId = 1;            
            object id = SqlHelperPostGres.ExecuteScalar(ConnectionString, CommandType.Text, query, parameters);
            if (id != null)
            {
                newId = int.Parse(id.ToString());
                newId++;                
            }
            
            return newId;
        }

        public DataTable TrasformDataTable(DataTable dt)
        {
            int i = 0;
            foreach (string columnName in columnBool)
            {
                string columnNameOld = string.Concat(columnName, "_OLD");
                dt.Columns[columnName].Caption = columnNameOld;
                dt.Columns[columnName].ColumnName = columnNameOld;
                
                DataColumn column;
                column = new DataColumn();
                column.DataType = System.Type.GetType("System.Boolean");
                column.ColumnName = columnName;
                dt.Columns.Add(column);
                i++;
            }

            if (i > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    foreach (string columnName in columnBool)
                    {                        
                         if (dr[string.Concat(columnName, "_OLD")].ToString().Equals("1"))
                            dr[columnName] = true;
                        else dr[columnName] = false;
                    }
                }
            }

            return dt; 
        }

        public virtual void SetConnectionString(string connectionString)
        {
            if (!connectionString.Equals(string.Empty))
                ConnectionString = connectionString;
            else ConnectionString = ProviderHelper.ConnectionString;            
        }

        public void SetTransaction(PgSqlTransaction transactionBase)
        {
            transaction = transactionBase;
            SetConnectionString(transaction.Connection.ConnectionString);
        }

        #endregion
    
        public ***ClassName*** Mapping(PgSqlDataReader dataReader)
        {
            ***ClassName*** item = new ***ClassName***();

***MappingDataReader***           
            return item;
        }

        public ***ClassName*** MappingDataTable(DataRow dataReader)
        {
            ***ClassName*** item = new ***ClassName***();

***MappingDataTable***           
            return item;
        }

        private PgSqlParameter[] GetParameter(EventContext operation)
        {
            PgSqlParameter[] parameters = new PgSqlParameter[20];

            #region Parameter
***Parameters***
            
            #endregion

            switch (operation)
            {
                case EventContext.Insert:
                    parameters = new PgSqlParameter[] 
                                                        {
                                                            ***ParametersListInsert***
                                                        };                                                    
                    break;
                case EventContext.Update:
                    parameters = new PgSqlParameter[] { ***ParametersListUpdate*** };                                                   
                    break;
                case EventContext.Delete:
                    parameters = new PgSqlParameter[] { ***ParametersListDelete*** };
                    break;
                case EventContext.Clone:
                    parameters = new PgSqlParameter[] { ***ParametersListClone*** };
                    break;
            }

            return parameters;
        }     

        public bool IsTransaction
        {
            get
            {
                if (transaction != null) return true;
                else return false;
            }
        }

        public PgSqlTransaction GetTransaction
        {
            get
            {
                if (transaction != null) return transaction;
                else return null;
            }
        }

        public class SuperClass
        {

***SuperClass***

        }

        #region Staticfields
        
        public class Fields
        {

***PublicField***

        }
        
        #endregion
    }

        
}