// Generated by Model Creator #Version#, #Date#
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Collections;

namespace ***NameSpace***
{
    public class ***ClassFile***
    {
        string className = "***ClassName***";
        public string ConnectionString = ***Provider***;
		public string ConnectionStringLog = string.Empty;
		bool isLogManagement = false;
		SqlTransaction transaction;		
        public Dictionary<string, Field> SelectFields = new Dictionary<string, Field>();
        public Dictionary<string, Field> UpdateFields = new Dictionary<string, Field>();
        public Dictionary<string, Field> WhereFields = new Dictionary<string, Field>();
		int agentCode = Null.Int;

        public ***ClassFile***()
		{
            LoadConfiguration();
        }

        public ***ClassFile***(string connectionString)
        {
            ConnectionString = connectionString;
			 LoadConfiguration();
        }

		private void LoadConfiguration()
        {
            if (ClassInformation.ConnectionStringMain != null)
                ConnectionString = ClassInformation.ConnectionStringMain;
            if (ClassInformation.IsLogManagement)
			{
				isLogManagement = true;
                ConnectionStringLog = ClassInformation.ConnectionStringLog;
				agentCode = ClassInformation.WebUserCode;
			}

        }

        #region Field

***PrivateField***
***PublicField***
        #endregion

        #region Field Custom
       
        public void AddSelect(object field)
        {
            AddSelect(field, string.Empty);
        }

        public void AddSelect(object field, string alias)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                SelectFields.Add(kvp.Key, kvp.Value);
            }
        }       

        public void AddUpdate(object field, object value)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                kvp.Value.Value = value;
                UpdateFields.Add(kvp.Key, kvp.Value);
            }
        }
      
        public void AddWhere(object field, object value)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                kvp.Value.Value = value;
                WhereFields.Add(kvp.Key, kvp.Value);
            }
        }

        public void OpenBracket()
        {
            Field field = new Field();
            field.Name = "(";
            WhereFields.Add(WhereFields.Count.ToString(), field);
        }

        public void CloseBracket()
        {
            Field field = new Field();
            field.Name = ")";
            WhereFields.Add(WhereFields.Count.ToString(), field);
        }

        public void AddWhere(object field, object value, OperatorType operatorType)
        {
            Dictionary<string, Field> collection = TrasformFields(field.ToString());
            foreach (KeyValuePair<string, Field> kvp in collection)
            {
                kvp.Value.FilterType = operatorType;
                kvp.Value.Value = value;
                WhereFields.Add(kvp.Key, kvp.Value);
            }
        }

        public void SetSelect(params object[] fields)
        {
            SelectFields = TrasformFields(fields);
        }

        public void SetUpdate(params object[] fields)
        {
            UpdateFields = TrasformFields(fields);
        }

        public void SetWhere(params object[] fields)
        {
            WhereFields = TrasformFields(fields);
        }

        public void ClearSelect()
        {
            SelectFields = new Dictionary<string, Field>();
        }

        public void ClearUpdate()
        {
            UpdateFields = new Dictionary<string, Field>();
        }

        public void ClearWhere()
        {
            WhereFields = new Dictionary<string, Field>();
        }

        private Dictionary<string, Field> TrasformFields (params object[] fields)
        {
            Dictionary<string, Field> fieldsCollection = new Dictionary<string, Field>();

            #region Fields 

            Field field = new Field();
            for (int i = 0; i < fields.Length; i++)
            {                        
                if ((fields[i] is Enum) || (fields[i] is String))
                {
                    switch(fields[i].ToString()) {                    
***SWITCHCUSTOMFIELDS*** 
                    }
                }
            }

            return fieldsCollection;

            #endregion        
        }

        public enum F
        {
***FIELDENUM***
        }

        #endregion

        #region Crud

        public ***ReturnTypeKey*** InsertKey()
        {           
             return InsertPrivate();
        }

        public void ***Insert***()
        {           
            InsertPrivate();
        }
        
        private ***ReturnTypeKey*** InsertPrivate()
        {   
			***TestEmptyKey***SqlParameter[] parameters = GetParameter(EventContext.Insert);
            
			if (transaction == null)
                SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure, string.Concat("***Insert***", className), parameters);
            else SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure, string.Concat("***Insert***", className), parameters);
            			
			//if (isLogManagement)
				//LogIt(EventContext.Insert,codeReturn);
***ReturnKeyInsert***
        }

        public ***ReturnTypeKey*** Clone()
        {           
            SqlParameter[] parameters = GetParameter(EventContext.Clone);
            
			if (transaction == null)
                SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure, string.Concat("***Clone***", className), parameters);
            else SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure, string.Concat("***Clone***", className), parameters);

			//if (isLogManagement)
				//LogIt(EventContext.Clone,***ClassName***Code);            
***ReturnKeyInsert***          
        }
       
        public void ***Update***()
        {            
            SqlParameter[] parameters = GetParameter(EventContext.Update);
            
			if (transaction == null)
                SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure, string.Concat("***Update***", className), parameters);
            else SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure, string.Concat("***Update***", className), parameters);

			//if (isLogManagement)
				//LogIt(EventContext.Update,***ClassName***Code);
        }

        public virtual int UpdateDynamic()
        {
            string query = SqlUtility.BuildUpdate(className, UpdateFields, WhereFields);

            try
            {
               return SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.Text, query);              
            }
            catch {}
            finally
            {
                UpdateFields.Clear();
                WhereFields.Clear();
            }
            return 0;
        }

        public void ***Delete***()
        {            
            SqlParameter[] parameters = GetParameter(EventContext.Delete);
			
			if (transaction == null)
                SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure, string.Concat("***Delete***", className), parameters);
            else SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure, string.Concat("***Delete***", className), parameters);
			
			//if (isLogManagement)
				//LogIt(EventContext.Delete,***ClassName***Code);           
        }

        public void Delete(***KeysParameter***)
        {
            ***SetKeyValues***
            SqlParameter[] parameters = GetParameter(EventContext.Delete);

            if (transaction == null)
                SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure, string.Concat("***Delete***", className), parameters);
            else SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure, string.Concat("***Delete***", className), parameters);

			//if (isLogManagement)
				//LogIt(EventContext.Delete,code);
        }

        public virtual int DeleteDynamic()
        {
            string query = SqlUtility.BuildDelete(className, WhereFields);

            try
            {                
                return SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.Text, query);                
            }
            catch {  }     
            finally
            {
                WhereFields.Clear();
            }
            return 0;
        }

        #endregion

        #region CollectionBase

        public DataTable ***GetCollection***()
        {
            string storedProcedure = string.Concat("***GetCollection***", className);           
            return SqlHelper.ExecuteDataTable(ConnectionString, CommandType.StoredProcedure, storedProcedure);
        }       

        public ***ClassFile*** ***GetByCode***(***ReturnTypeKeyParameters***)
        {
            string storedProcedure = string.Concat("***GetByCode***", className);
            ***ClassName*** item = new ***ClassName***();

            #region Parameters
			***GetParametersKeyCode***            
            SqlParameter[] parameters = new SqlParameter[] { 
***ParametersListKey*** 
			};

            #endregion

            SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString, CommandType.StoredProcedure, storedProcedure, parameters);
            try
            {
                while (dataReader.Read())
                {
                    item = Mapping(dataReader);
                    break;
                }
            }
            catch (Exception ex) { throw new Exception(ex.Message); }
            finally
            {
                if (!dataReader.IsClosed) dataReader.Close();
                dataReader.Dispose();
            }
            return item;
        }

        public virtual DataTable GetCollectionDynamic()
        {
            string query = SqlUtility.BuildSelect(className, SelectFields, WhereFields);

			SelectFields.Clear();
            WhereFields.Clear();

            return SqlHelper.ExecuteDataTable(ConnectionString, CommandType.Text, query);            
        }  

        public virtual bool CheckExist(***ReturnTypeKeyParameters***)
        {			
            //string query = string.Format("SELECT 1 FROM {0} WHERE {0}Code = @Code",className);
            //***ClassName*** item = new ***ClassName***();

            //#region Parameters

            //SqlParameter parameterCode = new SqlParameter("@Code", SqlDbType.Int);
            //parameterCode.Value = code;

            //SqlParameter[] parameters = new SqlParameter[] { parameterCode };

            //#endregion

            //object id = SqlHelper.ExecuteScalar(ConnectionString, CommandType.Text,query, parameters);
            
            //if (id == null)
            //    return false;
            //else return true;

			return true;
        }

        #endregion

        #region Collection

***Collection*** 
        
        #endregion

        #region Functionality

        public bool ***IsUnknown***
        {
            get 
            {                
                if (***FirstKey***.Equals(***FirstKeyNull***)) return true;
                else return false;
            }
        }
		
		public int GetSum()
        {
            return GetCollection().Rows.Count;
        }

        public int GetSumDinamic()
        {
            return GetCollectionDynamic().Rows.Count;
        }

		public virtual void SetConnectionString(string connectionString)
        {
            if (!connectionString.Equals(string.Empty))
                ConnectionString = connectionString;
            else ConnectionString = ProviderHelper.ConnectionString;            
        }

        public void SetTransaction(SqlTransaction transactionBase)
        {
            transaction = transactionBase;
            SetConnectionString(transaction.Connection.ConnectionString);
        }

        #endregion

		#region LogManagement

        public bool LogIt(EventContext eventContext,int codeRecord)
        {            
            SqlParameter[] parameters = new SqlParameter[6];

            SqlParameter parameterLogDate = new SqlParameter("@LogDate", SqlDbType.DateTime);
            DataHelper.ManageParameter(ref parameterLogDate, DateTime.Now);

            SqlParameter parameterTable = new SqlParameter("@TableName", SqlDbType.VarChar, 20);
            DataHelper.ManageParameter(ref parameterTable, "***ClassName***");

            SqlParameter parameterTableCode = new SqlParameter("@TableCode", SqlDbType.Int);
            DataHelper.ManageParameter(ref parameterTableCode, codeRecord);

            SqlParameter parameterOperation = new SqlParameter("@Operation", SqlDbType.VarChar, 1);
            DataHelper.ManageParameter(ref parameterOperation, eventContext.ToString());

            SqlParameter parameterWebUser = new SqlParameter("@WebUserCode", SqlDbType.Int);
            DataHelper.ManageParameter(ref parameterWebUser, agentCode);

			string data = string.Empty;
            ***ClassName*** log = new ***ClassName***();
            if ((eventContext == EventContext.Update) || (eventContext == EventContext.Insert))
            {
                string query = string.Format("***LogFieldSelect***{0}",codeRecord);
				
				DataTable dtItem = SqlHelper.ExecuteDataTable(ConnectionString, CommandType.Text, query);
                if (dtItem.Rows.Count == 1)
                {                    
                    for (int i = 0; i < dtItem.Columns.Count; i++)
                        data = string.Format("{0}{1} ", data, dtItem.Rows[0][i].ToString());                                                                    
                }
            }			

			SqlParameter parameterData = new SqlParameter("@Data", SqlDbType.NText);
            DataHelper.ManageParameter(ref parameterData, data);

            parameters = new SqlParameter[] { parameterLogDate, parameterTable, parameterTableCode, parameterOperation, parameterWebUser, parameterData };

            try
            {
                SqlHelper.ExecuteNonQuery(ConnectionStringLog, CommandType.StoredProcedure, "SetLog", parameters);
                return true;
            }
            catch { }
                        
            return false;
        }

		#endregion
    
        private ***ClassName*** Mapping(SqlDataReader dataReader)
        {
            ***ClassName*** item = new ***ClassName***();

***Mapping***           
            return item;
        }

        private SqlParameter[] GetParameter(EventContext operation)
        {
            SqlParameter[] parameters = new SqlParameter[20];

            #region Parameter
***Parameters***
                                
                SqlParameter parameterIdentity = new SqlParameter("@Identity", SqlDbType.Int);
                parameterIdentity.Direction = ParameterDirection.Output;               

            #endregion

            switch (operation)
            {
                case EventContext.Insert:
                    parameters = new SqlParameter[] { 
***ParametersListInsert***                                                    
                    break;
                case EventContext.Update:
                    parameters = new SqlParameter[] { 
***ParametersListUpdate***
                    break;
                case EventContext.Delete:
                    parameters = new SqlParameter[] { 
***ParametersListDelete***
                    break;
                case EventContext.Clone:
                    parameters = new SqlParameter[] { 
***ParametersListUpdate***                                                    
                    break;
            }

            return parameters;
        }       
    }
}