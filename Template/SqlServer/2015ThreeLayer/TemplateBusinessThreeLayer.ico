// Generated by Model Creator #Version#, #Date#
using System;
using System.Data;
using System.Collections.Generic;
using System.Collections;

namespace ***NameSpaceBusiness***
{
    public partial class ***ClassName***
    {        
        public string ConnectionString = ***Provider***;
		public string ConnectionStringLog = string.Empty;
		int agentCode = Null.Int;
		***NameSpace***.***ClassName*** ***ClassName_LowerCase*** = new ***NameSpace***.***ClassName***();

        public ***ClassName***()
		{
            LoadConfiguration();			
        }

        public ***ClassName***(string connectionString)
        {
            ConnectionString = connectionString;
			 LoadConfiguration();			 
        }

		private void LoadConfiguration()
        {
            if (ClassInformation.ConnectionStringMain != null)
                ConnectionString = ClassInformation.ConnectionStringMain;
            if (ClassInformation.IsLogManagement)
			{				
                ConnectionStringLog = ClassInformation.ConnectionStringLog;
				agentCode = ClassInformation.WebUserCode;
			}			
        }

        #region Field

***PrivateField***
***PublicField***
        #endregion

        #region Crud

		private void MappingDataLayer()
		{***MappingDataLayer***
		}

		private ***NameSpaceBusiness***.***ClassName*** ReverseMapping(***NameSpace***.***ClassName*** map_***ClassName***)
		{
			***NameSpaceBusiness***.***ClassName*** new***ClassName*** = new ***NameSpaceBusiness***.***ClassName***();
***ReverseMappingDataLayer***

			return new***ClassName***;
		}

        public ***ReturnTypeKey*** InsertKey()
        {            
			MappingDataLayer();           
			return ***ClassName_LowerCase***.InsertKey();	
        }

        public void ***Insert***()
        {                
			MappingDataLayer();       
			***ClassName_LowerCase***.***Insert***();	
        }
              
        public ***ReturnTypeKey*** Clone()
        {   
			MappingDataLayer();
			return ***ClassName_LowerCase***.Clone();
        }
       
        public void ***Update***()
        {   
			MappingDataLayer();
			***ClassName_LowerCase***.***Update***();            
        }

        public virtual int UpdateDynamic()
        {
			MappingDataLayer();
			return ***ClassName_LowerCase***.UpdateDynamic();            
        }

        public void ***Delete***()
        {   
			MappingDataLayer();         
            ***ClassName_LowerCase***.***Delete***();             
        }

        public void Delete(***ReturnTypeKeyParameters***)
        {			
			***ClassName_LowerCase***.***Delete***(***ReturnTypeKeyParametersOnlyValue***);			         
        }

        public virtual int DeleteDynamic()
        {
			MappingDataLayer();
			return ***ClassName_LowerCase***.DeleteDynamic();          
        }

        #endregion

        #region CollectionBase

        public DataTable ***GetCollection***()
        {
			return ***ClassName_LowerCase***.***GetCollection***();
        }       

        public ***ClassName*** ***GetByCode***(***ReturnTypeKeyParameters***)
        {
			return ReverseMapping(***ClassName_LowerCase***.***GetByCode***(***ReturnTypeKeyParametersOnlyValue***));          
        }

        public virtual DataTable GetCollectionDynamic()
        {
            return ***ClassName_LowerCase***.GetCollectionDynamic();
        }  

        public virtual bool CheckExist(***ReturnTypeKeyParameters***)
        {			            
			return ***ClassName_LowerCase***.CheckExist(***ReturnTypeKeyParametersOnlyValue***);
        }

        #endregion

        #region Collection

***Collection*** 
        
        #endregion

        #region Functionality

        public bool ***IsUnknown***
        {
			get { return ***ClassName_LowerCase***.***IsUnknown***; }            
        }
		
		public int GetSum()
        {
			return ***ClassName_LowerCase***.GetSum();
        }

        public int GetSumDinamic()
        {
			return ***ClassName_LowerCase***.GetSumDinamic();            
        }

		public virtual void SetConnectionString(string connectionString)
        {
            if (!connectionString.Equals(string.Empty))
                ConnectionString = connectionString;
            else ConnectionString = ProviderHelper.ConnectionString;            
        }

        #endregion

		#region LogManagement

        public bool LogIt(EventContext eventContext,int codeRecord)
        {     
			return ***ClassName_LowerCase***.LogIt(eventContext,codeRecord);
        }

		#endregion
                                
    }
}