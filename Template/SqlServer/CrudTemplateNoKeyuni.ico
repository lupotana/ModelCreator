// Generated by Model Creator #Version#, #Date#
using System;
using System.Data;
using System.Data.SqlClient;

namespace ***NameSpace***
{
    public class ***ClassName***
    {
        string className = "***ClassName***";
        public string ConnectionString = "***Provider***";

        public ***ClassName***() {}

        public ***ClassName***(string connectionString)
        {
            ConnectionString = connectionString;
        }

        #region Field

***PrivateField***
***PublicField***
        #endregion

        #region Crud

        public void Insert()
        {           
            InsertPrivate();            
        }

        public int ***Insert***()
        {           
            return InsertPrivate();            
        }
        
        private int InsertPrivate()
        {           
            SqlParameter[] parameters = GetParameter(EventContext.Insert);
            SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure, string.Concat("***Insert***", className), parameters);            
            
            foreach (SqlParameter parameter in parameters)
            {
                if (parameter.ParameterName.Equals("@Identity"))
                    return Int32.Parse(parameter.Value.ToString());
            }
            return Null.Int;
        }        

        public void ***Update***()
        {
            ConcurrencyManagement(this.Timespan, ***MainCode***);
            SqlParameter[] parameters = GetParameter(EventContext.Update);
            SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure, string.Concat("***Update***", className), parameters);
        }

        public void ***Delete***()
        {
            ConcurrencyManagement(this.Timespan, ***MainCode***);
            SqlParameter[] parameters = GetParameter(EventContext.Delete);
            SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure, string.Concat("***Delete***", className), parameters);
        }

        #endregion

        #region CollectionBase

        public DataTable ***GetCollection***()
        {
            string storedProcedure = string.Concat("***GetCollection***", className);           
            return SqlHelper.ExecuteDataTable(ConnectionString, CommandType.StoredProcedure, storedProcedure);
        }
        
        public ***ClassName*** ***GetByCode***(***DeclarationParameterKeys***)
        {
            string storedProcedure = string.Concat("***GetByCode***", className);
            ***ClassName*** item = new ***ClassName***();

            #region Parameters

            SqlParameter parameterCode = new SqlParameter("@Code", SqlDbType.Int);
            parameterCode.Value = code;

            SqlParameter[] parameters = new SqlParameter[] { parameterCode };

            #endregion

            SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString, CommandType.StoredProcedure, storedProcedure, parameters);
            try
            {
                while (dataReader.Read())
                {
                    item = Mapping(dataReader);
                    break;
                }
            }
            catch (Exception ex) { throw new Exception(ex.Message); }
            finally
            {
                if (!dataReader.IsClosed) dataReader.Close();
                dataReader.Dispose();
            }
            return item;
        }

        #endregion

        #region Collection

***Collection*** 
        
        #endregion

        #region Functionality

        public bool ***IsUnknown***
        {
            get 
            {                
                if (***MainCode***.Equals(Null.Int)) return true;
                else return false;
            }
        }

        #endregion
    
        private ***ClassName*** Mapping(SqlDataReader dataReader)
        {
            ***ClassName*** item = new ***ClassName***();

***Mapping***           
            return item;
        }

        private SqlParameter[] GetParameter(EventContext operation)
        {
            SqlParameter[] parameters = new SqlParameter[20];

            #region Parameter
***Parameters***
                                
                SqlParameter parameterIdentity = new SqlParameter("@Identity", SqlDbType.Int);
                parameterIdentity.Direction = ParameterDirection.Output;               

            #endregion

            switch (operation)
            {
                case EventContext.Insert:
                    parameters = new SqlParameter[] { 
***ParametersListInsert***                                                    
                    break;
                case EventContext.Update:
                    parameters = new SqlParameter[] { 
***ParametersListUpdate***                                                    
                    break;
                case EventContext.Delete:
                    parameters = new SqlParameter[] { parameter***MainCode*** };
                    break;
            }

            return parameters;
        }

        public void ConcurrencyManagement(Byte[] oldTimeSpan, int ***MainCode***)
        {
            byte[] actualTimeSpan = this.GetByCode(***MainCode***).Timespan;

            if (!DataHelper.CompareArrayByte(oldTimeSpan, actualTimeSpan))
                throw new Exception("Il record è in questo momento usato da un'altro utente");            
        }
    }
}